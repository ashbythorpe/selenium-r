% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/session.R
\name{SeleniumSession}
\alias{SeleniumSession}
\title{Start a Selenium Client session}
\value{
A \code{SeleniumSession} object.

A \code{WebElement} object.

A \code{ShadowRoot} object.

The session object, invisibly.

A list that can (but may not always) contain the following
fields:
\itemize{
\item \code{ready}: Whether the server is ready to be connected to. This should
always be returned by the server.
\item \code{message}: A message about the status of the server.
\item \code{uptime}: How long the server has been running.
\item \code{nodes}: Information about the slots that the server can take.
}

A list with three items: \code{script}, \code{page_load}, and \code{implicit}.

The session object, invisibly.

The session object, invisibly.

The URL of the current page.

The session object, invisibly.

The session object, invisibly.

The session object, invisibly.

The title of the current page.

The handle of the current window (a string).

The session object, invisibly.

The session object, invisibly.

The handles of all open windows (a list of strings).

A list containing two elements:
\itemize{
\item \code{handle}: The handle of the new window.
\item \code{type}: The type of window. ("tab" or "window").
}

The session object, invisibly.

The session object, invisibly.

A list containing four elements:
\itemize{
\item \code{x}: The x position of the window relative to the left of the screen.
\item \code{y}: The y position of the window relative to the top of the screen.
\item \code{width}: The width of the window.
\item \code{height}: The height of the window.
}

The session object, invisibly.

The session object, invisibly.

The session object, invisibly.

The session object, invisibly.

A \code{WebElement} object.

A \code{WebElement} object.

A list of \code{WebElement} objects.

A string.

The return value of the script. Nodes or lists of nodes will
be converted to \code{WebElement} objects.

The return value of the script. Nodes or lists of nodes will
be converted to \code{WebElement} objects.

A list of cookies. Each cookie is a list with a \code{name} and
\code{value} field, along with some other optional fields.

The cookie object.

The session object, invisibly.

The session object, invisibly.

The session object, invisibly.

The session object, invisibly.

The session object, invisibly.

The session object, invisibly.

The session object, invisibly.

The message of the current alert (a string).

The session object, invisibly.

The base64-encoded PNG screenshot, as a string.

The base64-encoded PDF, as a string.
}
\description{
This class represents the client to a Selenium session. It will only work
if a Selenium server instance is running. If you get an error, use
\code{\link[=selenium_server_available]{selenium_server_available()}} to check if a server is running. See the
package README for more information, or use \code{\link[=selenium_server]{selenium_server()}} to try and
start a server automatically.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{id}}{The id of the session, generated when the session is started.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SeleniumSession-new}{\code{SeleniumSession$new()}}
\item \href{#method-SeleniumSession-create_webelement}{\code{SeleniumSession$create_webelement()}}
\item \href{#method-SeleniumSession-create_shadowroot}{\code{SeleniumSession$create_shadowroot()}}
\item \href{#method-SeleniumSession-close}{\code{SeleniumSession$close()}}
\item \href{#method-SeleniumSession-status}{\code{SeleniumSession$status()}}
\item \href{#method-SeleniumSession-get_timeouts}{\code{SeleniumSession$get_timeouts()}}
\item \href{#method-SeleniumSession-set_timeouts}{\code{SeleniumSession$set_timeouts()}}
\item \href{#method-SeleniumSession-navigate}{\code{SeleniumSession$navigate()}}
\item \href{#method-SeleniumSession-current_url}{\code{SeleniumSession$current_url()}}
\item \href{#method-SeleniumSession-back}{\code{SeleniumSession$back()}}
\item \href{#method-SeleniumSession-forward}{\code{SeleniumSession$forward()}}
\item \href{#method-SeleniumSession-refresh}{\code{SeleniumSession$refresh()}}
\item \href{#method-SeleniumSession-title}{\code{SeleniumSession$title()}}
\item \href{#method-SeleniumSession-window_handle}{\code{SeleniumSession$window_handle()}}
\item \href{#method-SeleniumSession-close_window}{\code{SeleniumSession$close_window()}}
\item \href{#method-SeleniumSession-switch_to_window}{\code{SeleniumSession$switch_to_window()}}
\item \href{#method-SeleniumSession-window_handles}{\code{SeleniumSession$window_handles()}}
\item \href{#method-SeleniumSession-new_window}{\code{SeleniumSession$new_window()}}
\item \href{#method-SeleniumSession-switch_to_frame}{\code{SeleniumSession$switch_to_frame()}}
\item \href{#method-SeleniumSession-switch_to_parent_frame}{\code{SeleniumSession$switch_to_parent_frame()}}
\item \href{#method-SeleniumSession-get_window_rect}{\code{SeleniumSession$get_window_rect()}}
\item \href{#method-SeleniumSession-set_window_rect}{\code{SeleniumSession$set_window_rect()}}
\item \href{#method-SeleniumSession-maximize_window}{\code{SeleniumSession$maximize_window()}}
\item \href{#method-SeleniumSession-minimize_window}{\code{SeleniumSession$minimize_window()}}
\item \href{#method-SeleniumSession-fullscreen_window}{\code{SeleniumSession$fullscreen_window()}}
\item \href{#method-SeleniumSession-get_active_element}{\code{SeleniumSession$get_active_element()}}
\item \href{#method-SeleniumSession-find_element}{\code{SeleniumSession$find_element()}}
\item \href{#method-SeleniumSession-find_elements}{\code{SeleniumSession$find_elements()}}
\item \href{#method-SeleniumSession-get_page_source}{\code{SeleniumSession$get_page_source()}}
\item \href{#method-SeleniumSession-execute_script}{\code{SeleniumSession$execute_script()}}
\item \href{#method-SeleniumSession-execute_async_script}{\code{SeleniumSession$execute_async_script()}}
\item \href{#method-SeleniumSession-get_cookies}{\code{SeleniumSession$get_cookies()}}
\item \href{#method-SeleniumSession-get_cookie}{\code{SeleniumSession$get_cookie()}}
\item \href{#method-SeleniumSession-add_cookie}{\code{SeleniumSession$add_cookie()}}
\item \href{#method-SeleniumSession-delete_cookie}{\code{SeleniumSession$delete_cookie()}}
\item \href{#method-SeleniumSession-delete_all_cookies}{\code{SeleniumSession$delete_all_cookies()}}
\item \href{#method-SeleniumSession-perform_actions}{\code{SeleniumSession$perform_actions()}}
\item \href{#method-SeleniumSession-release_actions}{\code{SeleniumSession$release_actions()}}
\item \href{#method-SeleniumSession-dismiss_alert}{\code{SeleniumSession$dismiss_alert()}}
\item \href{#method-SeleniumSession-accept_alert}{\code{SeleniumSession$accept_alert()}}
\item \href{#method-SeleniumSession-get_alert_text}{\code{SeleniumSession$get_alert_text()}}
\item \href{#method-SeleniumSession-send_alert_text}{\code{SeleniumSession$send_alert_text()}}
\item \href{#method-SeleniumSession-screenshot}{\code{SeleniumSession$screenshot()}}
\item \href{#method-SeleniumSession-print_page}{\code{SeleniumSession$print_page()}}
\item \href{#method-SeleniumSession-clone}{\code{SeleniumSession$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-new"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-new}{}}}
\subsection{Method \code{new()}}{
Initialize a \code{SeleniumSession} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$new(
  browser = "chrome",
  port = 4444L,
  host = "localhost",
  verbose = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{browser}}{The name of the browser to use (e.g. "chrome", "firefox",
"edge").}

\item{\code{port}}{The port that the Selenium server is using, so we can
connect to it.}

\item{\code{host}}{The host that the Selenium server is running on. This is
usually 'localhost' (i.e. Your own machine).}

\item{\code{verbose}}{Whether to print the web requests that are being sent and
any responses.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-create_webelement"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-create_webelement}{}}}
\subsection{Method \code{create_webelement()}}{
Create a \code{WebElement} object using the parameters of the current
session.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$create_webelement(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The element id.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-create_shadowroot"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-create_shadowroot}{}}}
\subsection{Method \code{create_shadowroot()}}{
Create a \code{ShadowRoot} object using the parameters of the current
session.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$create_shadowroot(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The shadow root id.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-close"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-close}{}}}
\subsection{Method \code{close()}}{
Close the current session. Once a session is closed, its methods will
no longer work. However, the Selenium server will still be running.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$close()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-status"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-status}{}}}
\subsection{Method \code{status()}}{
Get the status of the Selenium server. Unlike all other methods, this
method is independent of the session itself (meaning it can be used
even after \code{SeleniumSession$close()} is called). It is identical to
\code{\link[=get_server_status]{get_server_status()}}, but uses the host, port and verbose options
passed to the session, for convenience.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$status()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-get_timeouts"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-get_timeouts}{}}}
\subsection{Method \code{get_timeouts()}}{
Get the timeouts of the current session. There are three types of
timeouts:
\itemize{
\item \emph{session script timeout}: The amount of time that the server will wait
for scripts to run. Defaults to 3 seconds.
\item \emph{page load timeout}: The amount of time that the server will wait for
the page to load. Defaults to 30 seconds.
\item \emph{implicit wait}: The amount of time that the server will wait for
elements to be located, or for elements to become interactable when
required. Defaults to 0 seconds.
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$get_timeouts()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-set_timeouts"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-set_timeouts}{}}}
\subsection{Method \code{set_timeouts()}}{
Set the timeouts of the current session. The types of timeouts are
defined in \code{SeleniumSession$get_timeouts()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$set_timeouts(
  script = NULL,
  page_load = NULL,
  implicit_wait = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{script}}{The amount of time to wait for scripts. By default, this
is not set.}

\item{\code{page_load}}{The amount of time to wait for the page to load.}

\item{\code{implicit_wait}}{The amount of time to wait for elements on the
page.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-navigate"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-navigate}{}}}
\subsection{Method \code{navigate()}}{
Navigate to a URL.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$navigate(url)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{url}}{The URL to navigate to. Must begin with a protocol (e.g.
'https://').}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-current_url"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-current_url}{}}}
\subsection{Method \code{current_url()}}{
Get the current URL.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$current_url()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-back"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-back}{}}}
\subsection{Method \code{back()}}{
Go back in the navigation history.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$back()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-forward"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-forward}{}}}
\subsection{Method \code{forward()}}{
Go forward in the navigation history.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$forward()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-refresh"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-refresh}{}}}
\subsection{Method \code{refresh()}}{
Reload the current page.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$refresh()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-title"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-title}{}}}
\subsection{Method \code{title()}}{
Get the title of the current page.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$title()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-window_handle"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-window_handle}{}}}
\subsection{Method \code{window_handle()}}{
Get the current window handle.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$window_handle()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-close_window"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-close_window}{}}}
\subsection{Method \code{close_window()}}{
Close the current window.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$close_window()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-switch_to_window"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-switch_to_window}{}}}
\subsection{Method \code{switch_to_window()}}{
Switch to a specific window.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$switch_to_window(handle)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{handle}}{The handle of the window to switch to.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-window_handles"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-window_handles}{}}}
\subsection{Method \code{window_handles()}}{
Get the handles of all open windows.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$window_handles()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-new_window"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-new_window}{}}}
\subsection{Method \code{new_window()}}{
Create a new window. Note that this window is not automatically
switched to.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$new_window(type = c("tab", "window"))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{Whether to create a tab or a window.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-switch_to_frame"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-switch_to_frame}{}}}
\subsection{Method \code{switch_to_frame()}}{
Frames allow you to split a window into multiple sections, where each
section can load a separate HTML document. This function allows you to
switch to a specific frame, given its ID, meaning that frame will become
the current browsing context.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$switch_to_frame(id = NA)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the frame to switch to. By default, the top-level
browsing context is switched to (i.e. not a frame). This can also be
a \code{WebElement} object, in which case the frame that contains said
element will be switched to.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-switch_to_parent_frame"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-switch_to_parent_frame}{}}}
\subsection{Method \code{switch_to_parent_frame()}}{
Switch to the parent frame of the current frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$switch_to_parent_frame()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-get_window_rect"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-get_window_rect}{}}}
\subsection{Method \code{get_window_rect()}}{
Get the size and position of the current window.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$get_window_rect()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-set_window_rect"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-set_window_rect}{}}}
\subsection{Method \code{set_window_rect()}}{
Set the size and position of the current window.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$set_window_rect(
  width = NULL,
  height = NULL,
  x = NULL,
  y = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{width}}{The width of the window.}

\item{\code{height}}{The height of the window.}

\item{\code{x}}{The x position of the window relative to the left of the screen.}

\item{\code{y}}{The y position of the window relative to the top of the screen.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-maximize_window"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-maximize_window}{}}}
\subsection{Method \code{maximize_window()}}{
Maximize the current window. This makes the window the maximum size it
can be, without being full screen
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$maximize_window()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-minimize_window"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-minimize_window}{}}}
\subsection{Method \code{minimize_window()}}{
Minimize the current window. This hides the window.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$minimize_window()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-fullscreen_window"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-fullscreen_window}{}}}
\subsection{Method \code{fullscreen_window()}}{
Makes the window full screen
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$fullscreen_window()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-get_active_element"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-get_active_element}{}}}
\subsection{Method \code{get_active_element()}}{
Get the currently active element.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$get_active_element()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-find_element"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-find_element}{}}}
\subsection{Method \code{find_element()}}{
Find the first element matching a selector.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$find_element(
  using = c("css selector", "xpath", "tag name", "link text", "partial link text"),
  value
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{using}}{The type of selector to use.}

\item{\code{value}}{The value of the selector: a string.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-find_elements"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-find_elements}{}}}
\subsection{Method \code{find_elements()}}{
Find all elements matching a selector.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$find_elements(
  using = c("css selector", "xpath", "tag name", "link text", "partial link text"),
  value
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{using}}{The type of selector to use.}

\item{\code{value}}{The value of the selector: a string.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-get_page_source"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-get_page_source}{}}}
\subsection{Method \code{get_page_source()}}{
Get the HTML source of the current page, serialized as a string.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$get_page_source()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-execute_script"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-execute_script}{}}}
\subsection{Method \code{execute_script()}}{
Execute a JavaScript script.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$execute_script(x, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{The script to execute. To return a value, do so explicitly,
e.g. \verb{return 1}.}

\item{\code{...}}{Additional arguments to pass to the script. These can be
accessed in the script using the \code{arguments} array. Can be \code{WebElement}
objects or lists of such objects, which will be converted to nodes.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-execute_async_script"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-execute_async_script}{}}}
\subsection{Method \code{execute_async_script()}}{
Execute an asynchronous JavaScript script, waiting for a value to be
returned.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$execute_async_script(x, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{The script to execute. Unlike \code{execute_script()}. You return
an value using the callback function, which can be accessed using
\code{arguments[arguments.length - 1]}. For example, to return 1, you
would write \code{arguments[arguments.length - 1](1)}. This allows you to
write asynchronous JavaScript, but treat it like synchronous R code.}

\item{\code{...}}{Additional arguments to pass to the script. Can be
\code{WebElement} objects or lists of such objects, which will be converted
to nodes.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-get_cookies"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-get_cookies}{}}}
\subsection{Method \code{get_cookies()}}{
Get all cookies.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$get_cookies()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-get_cookie"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-get_cookie}{}}}
\subsection{Method \code{get_cookie()}}{
Get a specific cookie using its name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$get_cookie(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The name of the cookie.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-add_cookie"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-add_cookie}{}}}
\subsection{Method \code{add_cookie()}}{
Add a cookie to the cookie store of the current document.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$add_cookie(cookie)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cookie}}{The cookie object to add: a list which must contain a
\code{name} and \code{value} field.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-delete_cookie"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-delete_cookie}{}}}
\subsection{Method \code{delete_cookie()}}{
Delete a cookie using its name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$delete_cookie(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The name of the cookie.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-delete_all_cookies"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-delete_all_cookies}{}}}
\subsection{Method \code{delete_all_cookies()}}{
Delete all cookies in the cookie store of the current document.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$delete_all_cookies()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-perform_actions"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-perform_actions}{}}}
\subsection{Method \code{perform_actions()}}{
Perform a sequence of actions.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$perform_actions(actions, release_actions = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{actions}}{A \code{selenium_actions_stream} object, created using
\code{\link[=actions_stream]{actions_stream()}}.}

\item{\code{release_actions}}{Whether to call \code{release_actions()} after
performing the actions.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-release_actions"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-release_actions}{}}}
\subsection{Method \code{release_actions()}}{
Release all keys and pointers that were pressed using
\code{perform_actions()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$release_actions()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-dismiss_alert"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-dismiss_alert}{}}}
\subsection{Method \code{dismiss_alert()}}{
Dismiss the current alert, if present.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$dismiss_alert()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-accept_alert"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-accept_alert}{}}}
\subsection{Method \code{accept_alert()}}{
Accept the current alert, if present.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$accept_alert()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-get_alert_text"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-get_alert_text}{}}}
\subsection{Method \code{get_alert_text()}}{
Get the message of the current alert, if present.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$get_alert_text()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-send_alert_text"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-send_alert_text}{}}}
\subsection{Method \code{send_alert_text()}}{
Send text to the current alert, if present. Useful if the alert is a
prompt.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$send_alert_text(text)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{The text to send.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-screenshot"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-screenshot}{}}}
\subsection{Method \code{screenshot()}}{
Take a screenshot of the current page.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$screenshot()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-print_page"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-print_page}{}}}
\subsection{Method \code{print_page()}}{
Render the current page as a PDF.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$print_page(
  orientation = c("portrait", "landscape"),
  scale = 1,
  background = FALSE,
  width = NULL,
  height = NULL,
  margin = NULL,
  footer = NULL,
  header = NULL,
  shrink_to_fit = NULL,
  page_ranges = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{orientation}}{The page orientation, either \code{"portrait"} or
\code{"landscape"}.}

\item{\code{scale}}{The page scale, a number between 0 and 1.}

\item{\code{background}}{Whether to print the background of the page.}

\item{\code{width}}{The page width, in inches.}

\item{\code{height}}{The page height, in inches.}

\item{\code{margin}}{The page margin, in inches. Either a number, in which case
the margin on all sides are set to that value, or a list of four
numbers, with names \code{left}, \code{right}, \code{top}, and \code{bottom}, in which
case the margin on each side is set individually.}

\item{\code{footer}}{The page footer, as a string.}

\item{\code{header}}{The page header, as a string.}

\item{\code{shrink_to_fit}}{Whether to shrink the page to fit the width and
height.}

\item{\code{page_ranges}}{A list of page ranges (e.g. \code{"1"}, \code{"1-3"}) to print.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SeleniumSession-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SeleniumSession-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SeleniumSession$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
